Example

To turn the previous code into a try-catch-finally statement,
the cleanup code is separated from the working code, as follows.

C#

static void CodeWithCleanup()
{
    FileStream? file = null;
    FileInfo? fileInfo = null;

    try
    {
        fileInfo = new FileInfo("./file.txt");

        file = fileInfo.OpenWrite();
        file.WriteByte(0xF);
    }
    catch (UnauthorizedAccessException e)

    {
        Console.WriteLine(e.Message);
    }
    finally
    {
        file?.Close();
    }
}

Because an exception can occur at any time within the try block before the OpenWrite() call,
or the OpenWrite() call itself could fail, we aren't guaranteed that the file is open when we
try to close it. The finally block adds a check to make sure that the FileStream object isn't
null before you call the Close method. Without the null check, the finally block could throw its
own NullReferenceException, but throwing exceptions in finally blocks should be avoided if it's possible.

(So, file? is a way to check if said FileStram is null. Best and quick way to check for NullReferenceException)

A database connection is another good candidate for being closed in a finally block. Because the
number of connections allowed to a database server is sometimes limited, you should close database
connections as quickly as possible. â€Ž

If an exception is thrown before you can close your connection, using the finally block is better
than waiting for garbage collection.